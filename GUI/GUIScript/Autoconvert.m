% dbstop if error
% clear
clc
%% This script is used to convert blf file into mat%%
%----------------------------------------------------
%% Routine setting
% [filename, pathname] = uigetfile('*.blf','Select .blf files to be converted','C:\Work\run','MultiSelect', 'on');
% fullfile(pathname, filename)
tic
% Cfg_select=input(['Please input ''1'' for converting files from ''CANCase'',\n','any key for default''CAN logger''(press ''enter'' to input):\n'],'s');
% disp('(Example of blf files location path, e.g.,C:\Work\run\EcoTest)')
% SourcePath=input('Please input the source path:','s');
SourcePath= fullfile(pathname, filename);
%  SourcePath='C:\Work\run\EcoTest';% Left for fixed source path
% addpath('dbc')
% if  strcmp(Cfg_select,'1')==1
 if  SourceConf==2
  
   ConfigPath=char(which('IMG_Configuration_new_HV.cfg'));
% ConfigPath='C:\Work\run\EcoTest\DBC\Configuration\IMG_Configuration_new_HV.cfg';% full path of Canoe Configuration file,has to be in this fullpath form
 elseif SourceConf==1
  ConfigPath=char(which('IMG_Configuration_new_HEV.cfg'));
% ConfigPath='C:\Work\run\EcoTest\DBC\Configuration\IMG_Configuration_new_HEV.cfg';
end
%  if  isempty(regexp(filename{1},'Trigger','match'))==1
% ConfigPath='C:\Work\run\EcoTest\DBC\Configuration\IMG_Configuration_new_HV.cfg';% full path of Canoe Configuration file
% else
% ConfigPath='C:\Work\run\EcoTest\DBC\Configuration\IMG_Configuration_new_HEV.cfg';
% end
%% Signals needed
% Signals={'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Vehicle_Speed_and_Distance::VehSpdAvgDrvn',...
%     'GlobalAHS_anonGMCONFIDENTIAL::PTEI_Engine_Torque_Status::EngActStdyStTorq'...
%     'Bosch_INVCON::INV_VCU_01::INV_OutputTorque'...
%     'CAN_Matrix_Hybrid_Simulation_G1I::BMS_HYB_03::BMS_SOC'...
%     'Bosch_INVCON::INV_VCU_04::INV_ElectricMachineTemperature'...
%     'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Engine_General_Status_4::EngCltTmp'...
%     'CAN_Antrieb_Derivate::BMS_06::BMS_Temperatur'...
%     'CAN_Matrix_Hybrid_Simulation_G1I::BMS_06::BMS_Temperatur'...
%     'CAN_Matrix_Hybrid_Simulation_G1I::BMS_HYB_02::BMS_IstSpannung'...
%     'CAN_Matrix_Hybrid_Simulation_G1I::BMS_HYB_02::BMS_IstStrom'...
%     'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Engine_General_Status_2::InstFuelConsmpRate'...
%     'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Trans_General_Status_2::TrnsShftLvrPos'...
%     'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Platform_General_Status::SysPwrMd'...
%     'GlobalAHS_anonGMCONFIDENTIAL::Prfrmnc_Trctn_Cntrl_Stat_HS::RdWhlAng'...
%     'GlobalAHS_anonGMCONFIDENTIAL::PTEI_Engine_General_Status_3_HS::VehGrdSnsrBsd'...
%     'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Engine_General_Status_1::EngSpd'...
%     'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Vehicle_Speed_and_Distance::DistRollCntAvgDrvn'...
%     'CANTemplate::NLG5_ACT_I::NLG5_OC_ACT'...
%     'CANTemplate::NLG5_ACT_I::NLG5_OV_ACT'...
%     };
%GlobalAHS_anonGMCONFIDENTIAL::PTEI_Engine_Torque_Status::EngActStdyStTorq'
Signals={'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Vehicle_Speed_and_Distance::VehSpdAvgDrvn'...
    'GlobalAHS_anonGMCONFIDENTIAL::ETEI_Engine_Torque_Status::EngActStdyStTorq'...
    'Bosch_INVCON::INV_VCU_01::INV_OutputTorque'...
    'CAN_Matrix_Hybrid_Simulation_G1I::BMS_HYB_03::BMS_SOC'...
    'Bosch_INVCON::INV_VCU_04::INV_ElectricMachineTemperature'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Engine_General_Status_4::EngCltTmp'...
    'CAN_Matrix_Hybrid_Simulation_G1I::BMS_HYB_06::BMS_Temperatur'...
    'CAN_Matrix_Hybrid_Simulation_G1I::BMS_HYB_02::BMS_IstSpannung'...
    'CAN_Matrix_Hybrid_Simulation_G1I::BMS_HYB_02::BMS_IstStrom'...
    'CAN_Antrieb_Derivate::BMS_08::BMS_Temp_Zelle_Max'...
    'Bosch_INVCON::INV_VCU_04::INV_InverterTemperature'...
    'Bosch_INVCON::INV_VCU_02::INV_TempCoolant'...
    'CAN_Antrieb_Derivate::BMS_08::BMS_Temp_Zelle_Max'...
    'Bosch_INVCON::INV_VCU_01::INV_Speed'...
    'GlobalAHS_anonGMCONFIDENTIAL::ETEI_Transmission_General_Status::TrnTrbAngVl'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Trans_General_Status_1::TrnsOutShftAngVel'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Trans_General_Status_2::TransEstGear'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Engine_General_Status_2::InstFuelConsmpRate'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Trans_General_Status_2::TrnsShftLvrPos'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Platform_General_Status::SysPwrMd'...
    'GlobalAHS_anonGMCONFIDENTIAL::Prfrmnc_Trctn_Cntrl_Stat_HS::RdWhlAng'...
    'GlobalAHS_anonGMCONFIDENTIAL::PTEI_Engine_General_Status_3_HS::VehGrdSnsrBsd'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Engine_General_Status_1::EngSpd'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Vehicle_Speed_and_Distance::DistRollCntAvgDrvn'...
    'CANTemplate::NLG5_ACT_I::NLG5_OC_ACT'...
    'CANTemplate::NLG5_ACT_I::NLG5_OV_ACT'...
    'GlobalAHS_anonGMCONFIDENTIAL::PPEI_Brake_Apply_Status::BrkPdlPos'};
NSig=length(Signals);

%% display CAN logger data on CANoe (to be added)
% dbstop if error

%% Initial setting 
% SourcePath='C:\Work\run\EcoTest\testlog';% get the source file path
% TargetFiles=dir(fullfile(SourcePath,'*.blf'));% get the files in the target path
TargetFiles=SourcePath;
App=actxserver('CANoe.Application'); % activate the COM interface
App.Open(ConfigPath);% load the IMG_configuration
OnSetup=App.Configuration.OnlineSetup;% Measurment Setup
logging=OnSetup.LoggingCollection.Item(1);% get the logging block
exporter=logging.Exporter;% get the exporter handle
Sources=exporter.Sources; % get source file handle

%% signal converted format setting
Settings=exporter.Settings;
Settings.SignalFormat =0; % just signal name
Settings.VariableFormat = 0;%  just signal name
MatlabSettings=Settings.Matlab;
MatlabSettings.LimitNameLength=0;% length to 'None'

%% Signals filtering
expfilter=exporter.Filter;
for j=1:NSig
    expfilter.Add(Signals{j});
end
expfilter.Enabled=1;

%% source and destination file settings
Dest=exporter.Destinations; % destination file handle
logMatPath=what('LoggerMatFiles');
pathname_gui=logMatPath.path;
for i=1:size(TargetFiles,1)
    FileName=TargetFiles{i}; % get the file names in target folder
    [~,DestName]=fileparts(FileName); % get the file name
    DestPath=char(fullfile(pathname_gui,[DestName,'.mat'])); % construct 'name.mat'
    
    %% detect the already converted 'blf' file
    if exist(DestPath,'file')==2
        disp([FileName,' is',' already converted'])
    elseif exist(DestPath,'file')~=2
        Sources.Clear % clear former source file
        Sources.Add(FileName);% add source file
        disp('Loading...')
        exporter.Load;
        disp('Load finished')
        Dest.Clear;% clear former destination file
        Dest.Add(DestPath);% add destination file
        disp('Saving...')
        exporter.Save;
        disp([FileName,' is',' converted'])
        toc
    end
end
disp('All Conversion Completed')
App.Quit;

